# pipeline architecture style

## 토폴로지
- Pipeline 구조는 일련의 처리 단계(Stage) 가 선형 혹은 분기형으로 연결된 형태입니다. 각 단계는 이전 단계의 출력을 입력으로 받아 처리한 후 다음 단계로 넘김
- 직렬(top-down) 연결
- 각 컴포넌트는 독립적인 처리 유닛
- 단방향 데이터 흐름
- 필터(Filter)와 커넥터(Connector) 기반

## 데이터 토폴로지
- 데이터는 스트림 형태로 각 단계 사이를 흐름
- 각 컴포넌트는 입력 데이터를 받아 처리하고 출력으로 전환
- 상태를 공유하지 않고 데이터를 완전히 넘기는 방식

## 스타일 특성
- 필터 -
- 프로덕서 - 파이프라인의 시작점. 따라서 Input 없이 Output만 있는 필터이며, 소스(source)라고도 부른다
- 트렌스포머 - 입력을 받아 선택적으로 변환한 후에 그다음으로 전송. 개선
- 테스터 - 일부 및 전체 테스트. 데이터를 더 처리할지 스위치 역할
- 컨슈머 - 파이프라인 흐름의 종결점. 최종 결과 db에 저장 혹은 ui 표출

## 평가
| 항목       | 점수(5점 만점) | 설명 |
|------------|----------------|------|
| **배포성**    | 4 | 각 단계가 독립적이기 때문에 개별 배포 가능하나, 순차적 흐름 특성상 순서를 고려해야 함. |
| **탄력성**    | 3 | 단계 중 일부 장애가 전체 흐름에 영향을 줄 수 있음. 재시도 메커니즘을 넣으면 개선 가능. |
| **진화성**    | 4 | 새로운 단계 추가나 기존 단계 교체가 비교적 용이하지만, 인터페이스 규약에 따라 조심해야 함. |
| **내고장성**  | 3 | 한 단계의 실패가 전체 흐름 중단으로 이어질 수 있음. 별도 장애 감지/처리 로직 필요. |
| **모듈성**    | 5 | 각 처리 단계가 독립된 모듈로 명확히 분리됨. 모듈화 측면에서는 이상적. |
| **전체 비용** | 3 | 모듈 간 인터페이스 설계와 연결 로직 유지에 비용이 들어감. 단순한 시스템보다 비용이 더 들 수 있음. |
| **성능**     | 3 | 병렬 처리가 어려운 경우 병목 현상이 발생할 수 있음. 하지만 단계별 최적화가 가능함. |
| **신뢰성**   | 4 | 각 단계의 책임이 명확하여 검증 및 로깅이 쉬워 신뢰성 확보 가능. 단, 한 단계의 실패가 전체에 영향 줄 수 있음. |
| **확장성**   | 4 | 특정 단계 병렬 처리나 확장이 가능함. 다만 순차 처리 특성상 전반적 확장은 제한됨. |
| **단순성**   | 3 | 구조적으로는 단순하지만 각 모듈 간 데이터 형식이나 흐름 제어 등 고려할 요소가 많음. |
| **시험성**   | 5 | 각 단계가 독립적이므로 유닛 테스트가 쉬우며, 단계별 테스트가 가능함. |

- 데이터의 순차적인 처리를 파이프라인 체이닝으로 연결할 수 있을 것 같아서 각 단계별로 처리가 필요할 경우에 유리
- CPU를 많이 잡아먹는 처리가 있을 경우에, 해당 단계의 파이프라인의 어플리케이션만 독립된 마이크로서비스로 독립시킨다면 확장성도 있음
- 짧은 개발하는경우 모놀리스로 개발하면 좋음
- 양방향 통신일 경우 안좋음 

## 적용예시
- AI 모델 파이프라인: 데이터 수집 → 전처리 → 학습 → 평가 → 배포
- 카프카에서 듀레이션 필터로 다음 데이터
